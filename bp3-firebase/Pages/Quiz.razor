@inject IJSRuntime JS
@page "/quiz"
<h3>Quiz</h3>

@if (Questions.Count == CurrentQ)
{
    <p>You had @amountCorrect/@Questions.Count questions correct!</p>
}
else if (Questions.Count > 0)
{
    <p class="text-danger">@Status</p>
    <p>@Questions[CurrentQ].GetQuestion</p>
    <input id="answer" @bind="Answer"/>
    <button @onclick="SubmitAnswer">Submit</button>

    <button class="btn d-block btn-secondary mt-4" @onclick="SkipQuestion">Skip question</button>
}

@code {
    private int CurrentQ;
    private List<Question>? Questions { get; set; } = new();
    private string? Answer;
    private int amountCorrect;
    private string Status = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await JS.InvokeAsync<dynamic>("getQuestions");
            string stringified = response.ToString();
            string[] split = stringified.Split(',');

            var responseAnswer = await JS.InvokeAsync<dynamic>("getAnswers");
            string stringifiedAnswer = responseAnswer.ToString();
            string[] splitAnswer = stringifiedAnswer.Split(',');

            for (var i = 0; i < splitAnswer.Length; i++)
            {
                Question q = new(split[i].Replace("\"", "").Replace("[", "").Replace("]", ""), 
                    splitAnswer[i].Replace("\"", "").Replace("[", "").Replace("]", ""));
                Questions.Add(q);
            }
            StateHasChanged();
        }
    }

    private void SubmitAnswer()
    {
        if (Answer == Questions[CurrentQ].GetAnswer)
        {
            Status = "";
            Answer = "";
            amountCorrect++;
            CurrentQ++;
        }
        else
        {
            Status = "Wrong answer";
        }
    }

    private void SkipQuestion()
    {
        Status = "";
        Answer = "";
        CurrentQ++;
    }
}
